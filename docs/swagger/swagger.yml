openapi: 3.0.2

info:
  title: AUTH MICROSERVICE
  description: Swagger for AUTH API
  contact:
    email: robertopombootero@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
    
servers:
  - url: http://localhost/api/auth
    description: Local debug

tags:
  - name: Account
    description: Accounts endpoints
  - name: Corporation
    description: Corporation endpoints

paths:
  /account:
    post:
      tags: 
        - Account
      summary: Create a new user
      operationId: register
      description: Register a new user using an email and a password
      parameters:
      - $ref: '#/components/parameters/AuthorizationHeader'
      - $ref: '#/components/parameters/FeaturesOffHeader'
      requestBody:
        $ref: '#/components/requestBodies/RegisterData'
      responses:
        201:
          $ref: '#/components/responses/201-PostRegister'

  /account/login:
    post:
      tags:
        - Account
      summary: Login a user
      operationId: login
      description: Login a user by email and password
      requestBody:
        $ref: '#/components/requestBodies/LoginData'
      responses:
        200:
          $ref: '#/components/responses/200-PostLogin'

  /account/activate:
    get:
      tags:
        - Account
      summary: Activate a user
      operationId: activate
      description: Activate a user by uuid and activationCode
      parameters:
      - $ref: '#/components/parameters/UuidQueryParam'
      - $ref: '#/components/parameters/ActivationCodeQueryParam'
      responses:
        204: 
          $ref: '#/components/responses/204-NotContent'

  /corp/{corpSlug}/flags:
    get:
      security:
        - bearerAuth: []
      tags:
        - Corporation
      summary: List of feature flags
      operationId: feature-flag
      description: List of features flags for testing
      parameters:
      - $ref: '#/components/parameters/CorpSlugPathParam'
      responses:
        200:
          $ref: '#/components/responses/200-GetFeaturesFlags'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    UuidQueryParam:
      name: uuid
      in: query
      description: user id
      required: true
      schema:
        type: string
        example: 4d2...fd9
    ActivationCodeQueryParam:
      name: activationCode
      in: query
      description: user activation code
      required: true
      schema:
        type: string
        example: 4d2...fd9
    AuthorizationHeader:
      name: AuthorizationHeader
      in: header
      description: User access token
      schema:
        type: string
        example: Bearer 32d...9g8
    FeaturesOffHeader:
      name: x-features-off
      in: header
      description: List of ids of feature flags to be deactivated
      schema:
        type: string
        example: notSendEmail,newFeatureId
    CorpSlugPathParam:
      name: corpSlug
      in: path
      required: true
      description: corporation slug
      schema:
        type: string
        example: testCORP

  requestBodies:
    LoginData:
      description: Body containing email and password
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                $ref: '#/components/schemas/Email'
              password:
                $ref: '#/components/schemas/Password'
    RegisterData:
      description: Body containing email and password
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                $ref: '#/components/schemas/Email'
              password:
                $ref: '#/components/schemas/Password'

  responses:
    200-GetFeaturesFlags:
      description: List of features flags
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureFlag'
                              
    200-PostLogin:
      description: User logged correctly
      content:
        application/json:
          schema:
            type: object
            properties:
              accessToken:
                $ref: '#/components/schemas/AccessToken'
              refreshToken:
                $ref: '#/components/schemas/RefreshToken'
              expiresIn:
                $ref: "#/components/schemas/ExpiresIn"
              user:
                $ref: '#/components/schemas/UserProfile'
    201-PostRegister:
      description: User created correctly
      content:
        application/json:
          schema:
            type: object
            properties:
              activationCode:
                $ref: '#/components/schemas/ActivationCode'
    204-NotContent:
      description: Not content

  schemas:
    AccessToken:
      type: string
      example: flj...d3f
    
    ActivationCode:
      type: string
      example: flj...d3f

    Email:
      type: string
      example: test@test.com

    ExpiresIn:
      type: number
      example: 1000

    FeatureFlag:
      type: object
      properties:
        id:
          type: string
          example: notSendEmail
        name:
          type: string
          example: Not send email
        description:
          type: string
          example: For testing purposes,...
        endpoints:
          type: array
          items:
            type: object
        criteria:
          type: object  

    Password:
      type: string
      example: password12!
    
    RefreshToken:
      type: string
      example: dfs...fws

    UserProfile:
      type: object
      properties:
        uuid:
          $ref: '#/components/schemas/UserUuid'
        email:
          $ref: '#/components/schemas/Email'
      
    UserUuid:
      type: string
      example: 7c06350d-cfd9-4b68-ad4b-5d2da829815d